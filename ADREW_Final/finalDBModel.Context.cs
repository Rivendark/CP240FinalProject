//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ADREW_Final
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class finalDBEntities : DbContext
    {
        public finalDBEntities()
            : base("name=finalDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DepartmentPosition> DepartmentPositions { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<EmployeeInfo> EmployeeInfoes { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<ProjectPosition> ProjectPositions { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<Wage> Wages { get; set; }
    
        public virtual int InsertEmployee(string userName, string lName, string mI, string fName, Nullable<System.DateTime> dateOfHire, Nullable<int> departmentID, Nullable<int> positionID, Nullable<bool> eContract, ObjectParameter id)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var mIParameter = mI != null ?
                new ObjectParameter("MI", mI) :
                new ObjectParameter("MI", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var dateOfHireParameter = dateOfHire.HasValue ?
                new ObjectParameter("DateOfHire", dateOfHire) :
                new ObjectParameter("DateOfHire", typeof(System.DateTime));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var eContractParameter = eContract.HasValue ?
                new ObjectParameter("EContract", eContract) :
                new ObjectParameter("EContract", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEmployee", userNameParameter, lNameParameter, mIParameter, fNameParameter, dateOfHireParameter, departmentIDParameter, positionIDParameter, eContractParameter, id);
        }
    }
}
